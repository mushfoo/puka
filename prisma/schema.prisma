// Prisma schema for Puka Reading Tracker
// Migrated from Supabase to Railway Postgres

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  name          String?
  image         String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  books         Book[]
  readingDays   ReadingDay[]
  settings      UserSettings?
  streakHistory StreakHistory?
  accounts      Account[]
  sessions      Session[]
  
  @@map("users")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Core application models
model Book {
  id       String @id @default(cuid())
  userId   String
  legacyId Int?   // For migration compatibility
  
  // Basic book information
  title  String
  author String
  notes  String?
  
  // Progress tracking
  progress Int        @default(0) // 0-100
  status   BookStatus @default(WANT_TO_READ)
  
  // Optional metadata
  isbn          String?
  coverUrl      String?
  tags          String[]
  rating        Int?     // 1-5
  totalPages    Int?
  currentPage   Int?
  genre         String?
  publishedDate String?
  
  // Date tracking
  dateStarted  DateTime?
  dateFinished DateTime?
  
  // System timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Sync metadata
  lastSynced  DateTime @default(now())
  syncVersion Int      @default(1)
  
  // Relations
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  readingDays ReadingDay[]
  
  @@unique([userId, legacyId])
  @@index([userId])
  @@index([userId, status])
  @@index([updatedAt])
  @@index([legacyId])
  @@map("books")
}

model ReadingDay {
  id     String   @id @default(cuid())
  userId String
  date   DateTime @db.Date
  
  // Reading session data
  bookIds String[]
  notes   String?
  source  ReadingSource @default(MANUAL)
  
  // System timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  books Book[]
  
  @@unique([userId, date])
  @@index([userId])
  @@index([userId, date])
  @@index([updatedAt])
  @@map("reading_days")
}

model UserSettings {
  id     String @id @default(cuid())
  userId String @unique
  
  // UI preferences
  theme       Theme    @default(SYSTEM)
  defaultView ViewMode @default(GRID)
  
  // Reading preferences
  dailyReadingGoal Int       @default(1)
  sortBy           SortBy    @default(DATE_ADDED)
  sortOrder        SortOrder @default(DESC)
  
  // Notification preferences
  notificationsEnabled Boolean @default(true)
  
  // Backup preferences
  autoBackup      Boolean         @default(false)
  backupFrequency BackupFrequency @default(WEEKLY)
  
  // System timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_settings")
}

model StreakHistory {
  id     String @id @default(cuid())
  userId String @unique
  
  // Streak data
  currentStreak Int       @default(0)
  longestStreak Int       @default(0)
  lastReadDate  DateTime? @db.Date
  
  // Enhanced tracking (JSON storage for flexibility)
  readingDaysData Json @default("{}")
  bookPeriodsData Json @default("[]")
  
  // Version and sync data
  dataVersion    Int      @default(1)
  lastCalculated DateTime @default(now())
  lastSynced     DateTime @default(now())
  
  // System timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("streak_history")
}

// Enums
enum BookStatus {
  WANT_TO_READ
  CURRENTLY_READING
  FINISHED
}

enum ReadingSource {
  MANUAL
  BOOK
  PROGRESS
}

enum Theme {
  LIGHT
  DARK
  SYSTEM
}

enum ViewMode {
  GRID
  LIST
}

enum SortBy {
  DATE_ADDED
  TITLE
  AUTHOR
  PROGRESS
  DATE_FINISHED
}

enum SortOrder {
  ASC
  DESC
}

enum BackupFrequency {
  DAILY
  WEEKLY
  MONTHLY
}