name: CI/CD Pipeline

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

env:
  NODE_VERSION: '18'

jobs:
  test:
    name: Test & Build
    runs-on: 
      group: self-hosted
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Type check
        run: npm run type-check

      - name: Lint
        run: npm run lint

      - name: Run unit tests
        run: npm run test

      - name: Build application
        run: npm run build

      - name: Install Playwright browsers
        run: npx playwright install

      - name: Run E2E tests
        run: npm run test:e2e

      - name: Upload test results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ github.run_id }}
          path: |
            playwright-report/
            test-results/
            coverage/
          retention-days: 7

      - name: Upload build artifacts
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ github.run_id }}
          path: dist/
          retention-days: 30

  security:
    name: Security Scan
    runs-on:
      group: self-hosted
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Check for vulnerabilities
        run: |
          npm audit --json > audit-results.json || true
          if [ -f audit-results.json ]; then
            echo "Security audit completed. Check artifact for details."
          fi

      - name: Upload security scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-${{ github.run_id }}
          path: audit-results.json
          retention-days: 7

  docker:
    name: Docker Build & Test
    runs-on:
      group: self-hosted
    needs: [test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker BuildKit
        run: |
          echo "DOCKER_BUILDKIT=1" >> $GITHUB_ENV
          echo "COMPOSE_DOCKER_CLI_BUILD=1" >> $GITHUB_ENV

      - name: Build Docker image
        run: docker compose build puka-app

      - name: Start containerized application
        run: docker compose up -d puka-app

      - name: Wait for application to be ready
        run: |
          echo "Waiting for application to start..."
          timeout 60 bash -c 'until curl -f http://localhost:3000 > /dev/null 2>&1; do sleep 2; done'
          echo "Application is ready!"

      - name: Test containerized application
        run: |
          # Test that the application responds
          response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000)
          if [ "$response" != "200" ]; then
            echo "Application health check failed. HTTP status: $response"
            exit 1
          fi
          echo "Container health check passed!"

      - name: Stop containers
        if: always()
        run: docker compose down

  performance:
    name: Performance Testing
    runs-on:
      group: self-hosted
    needs: [test]
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Start application
        run: |
          npm run preview &
          echo $! > preview.pid
          sleep 10

      - name: Run performance tests
        run: |
          # Run existing performance test suite
          npm run test:e2e -- --grep="performance"

      - name: Stop application
        if: always()
        run: |
          if [ -f preview.pid ]; then
            kill $(cat preview.pid) || true
            rm preview.pid
          fi

      - name: Upload performance results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: performance-results-${{ github.run_id }}
          path: |
            playwright-report/
            test-results/
          retention-days: 7

  notify:
    name: Notification
    runs-on:
      group: self-hosted
    needs: [test, security, docker]
    if: always() && github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Notify on success
        if: needs.test.result == 'success' && needs.security.result == 'success' && needs.docker.result == 'success'
        run: |
          echo "‚úÖ CI/CD Pipeline completed successfully for commit ${{ github.sha }}"
          echo "üöÄ Application is ready for deployment"

      - name: Notify on failure
        if: needs.test.result == 'failure' || needs.security.result == 'failure' || needs.docker.result == 'failure'
        run: |
          echo "‚ùå CI/CD Pipeline failed for commit ${{ github.sha }}"
          echo "üìã Check the job logs for details"
          exit 1