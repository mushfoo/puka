name: Deploy to Production

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    name: Build & Push Docker Image
    runs-on:
      group: self-hosted
    permissions:
      contents: read
      packages: write
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: |
          npm run type-check
          npm run lint
          npm run test

      - name: Build application
        run: npm run build

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on:
      group: self-hosted
    needs: build-and-push
    if: github.event.inputs.environment == 'staging' || github.event_name == 'workflow_dispatch'
    environment: staging
    
    steps:
      - name: Deploy to staging
        run: |
          echo "üöÄ Deploying to staging environment"
          echo "Image: ${{ needs.build-and-push.outputs.image-tag }}"
          # Add your staging deployment commands here
          # Example: kubectl set image deployment/puka-app puka-app=${{ needs.build-and-push.outputs.image-tag }}

  deploy-production:
    name: Deploy to Production
    runs-on:
      group: self-hosted
    needs: build-and-push
    if: github.event_name == 'release' || github.event.inputs.environment == 'production'
    environment: production
    
    steps:
      - name: Deploy to production
        run: |
          echo "üéâ Deploying to production environment"
          echo "Image: ${{ needs.build-and-push.outputs.image-tag }}"
          # Add your production deployment commands here
          # Example: kubectl set image deployment/puka-app puka-app=${{ needs.build-and-push.outputs.image-tag }}

  notify-deployment:
    name: Notify Deployment
    runs-on:
      group: self-hosted
    needs: [build-and-push, deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: Notify success
        if: needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success'
        run: |
          if [ "${{ needs.deploy-production.result }}" == "success" ]; then
            echo "üéâ Successfully deployed to PRODUCTION"
            echo "Version: ${{ github.ref_name }}"
          elif [ "${{ needs.deploy-staging.result }}" == "success" ]; then
            echo "‚úÖ Successfully deployed to STAGING" 
            echo "Image: ${{ needs.build-and-push.outputs.image-tag }}"
          fi

      - name: Notify failure
        if: needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure'
        run: |
          echo "‚ùå Deployment failed"
          echo "Check the deployment logs for details"
          exit 1